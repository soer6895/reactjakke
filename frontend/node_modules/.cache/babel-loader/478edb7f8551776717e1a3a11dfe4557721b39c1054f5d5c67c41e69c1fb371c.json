{"ast":null,"code":"var _jsxFileName = \"/Users/sorendahlmann/Desktop/Projekter/reactjakke/frontend/src/nfcCon.js\",\n  _s = $RefreshSig$();\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NfcCon() {\n  _s();\n  const location = useLocation();\n  const phoneNumber = location.state.phoneNumber;\n  const countryCode = location.state.countryCode;\n  async function readNFC() {\n    if ('NDEFReader' in window) {\n      // eslint-disable-next-line no-undef\n      const ndef = new NDEFReader(); // linje foroven : By adding the // eslint-disable-next-line no-undef comment, you're instructing ESLint to ignore the \"not defined\" warning for the next line. This is a simple way to address specific linting errors for lines that you know are correct.\n\n      try {\n        await ndef.scan();\n        console.log(\"Scan started successfully.\");\n        ndef.onreadingerror = () => {\n          console.log(\"Cannot read data from the NFC tag. Try another one?\");\n        };\n        ndef.onreading = event => {\n          console.log(\"NDEF message read.\");\n          const message = event.message;\n          for (const record of message.records) {\n            console.log(\"Record type:  \" + record.recordType);\n            console.log(\"MIME type:    \" + record.mediaType);\n            console.log(\"Record id:    \" + record.id);\n            switch (record.recordType) {\n              case \"text\":\n                // TODO: Read text record with record data, lang, and encoding.\n                break;\n              case \"url\":\n                // TODO: Read URL record with record data.\n                break;\n              default:\n              // TODO: Handle other records with record data.\n            }\n          }\n        };\n      } catch (error) {\n        console.log(`Error! Scan failed to start: ${error}.`);\n      }\n    } else {\n      console.log(\"Web NFC is not supported in this browser.\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center p-4 mt-4 mb-4 bg-white  rounded \",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"mb-4 text-3xl font-bold\",\n      children: \"NFC Reader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mb-8 text-lg\",\n      children: \"Scan an NFC tag with your device.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"mb-4 p-4 rounded bg-indigo-500 hover:bg-indigo-900 text-white\",\n      onClick: readNFC,\n      children: \"Start NFC Scan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-2 font-medium\",\n        children: \"Details from Previous Page:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Phone Number: \", phoneNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Country Code: \", countryCode]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n_s(NfcCon, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c = NfcCon;\nexport default NfcCon;\nvar _c;\n$RefreshReg$(_c, \"NfcCon\");","map":{"version":3,"names":["useLocation","jsxDEV","_jsxDEV","NfcCon","_s","location","phoneNumber","state","countryCode","readNFC","window","ndef","NDEFReader","scan","console","log","onreadingerror","onreading","event","message","record","records","recordType","mediaType","id","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/sorendahlmann/Desktop/Projekter/reactjakke/frontend/src/nfcCon.js"],"sourcesContent":["import { useLocation } from 'react-router-dom';\n\nfunction NfcCon() {\n    const location = useLocation();\n    const phoneNumber = location.state.phoneNumber;\n    const countryCode = location.state.countryCode;\n\n    async function readNFC() {\n        if ('NDEFReader' in window) {\n            // eslint-disable-next-line no-undef\n            const ndef = new NDEFReader(); // linje foroven : By adding the // eslint-disable-next-line no-undef comment, you're instructing ESLint to ignore the \"not defined\" warning for the next line. This is a simple way to address specific linting errors for lines that you know are correct.\n\n            try {\n                await ndef.scan();\n                console.log(\"Scan started successfully.\");\n\n                ndef.onreadingerror = () => {\n                    console.log(\"Cannot read data from the NFC tag. Try another one?\");\n                };\n\n                ndef.onreading = event => {\n                    console.log(\"NDEF message read.\");\n                    const message = event.message;\n\n                    for (const record of message.records) {\n                        console.log(\"Record type:  \" + record.recordType);\n                        console.log(\"MIME type:    \" + record.mediaType);\n                        console.log(\"Record id:    \" + record.id);\n\n                        switch (record.recordType) {\n                            case \"text\":\n                                // TODO: Read text record with record data, lang, and encoding.\n                                break;\n                            case \"url\":\n                                // TODO: Read URL record with record data.\n                                break;\n                            default:\n                            // TODO: Handle other records with record data.\n                        }\n                    }\n                };\n            } catch (error) {\n                console.log(`Error! Scan failed to start: ${error}.`);\n            }\n        } else {\n            console.log(\"Web NFC is not supported in this browser.\");\n        }\n    }\n\n    return (\n\n        <div className=\"flex flex-col items-center p-4 mt-4 mb-4 bg-white  rounded \">\n            <h1 className=\"mb-4 text-3xl font-bold\">NFC Reader</h1>\n            <p className=\"mb-8 text-lg\">Scan an NFC tag with your device.</p>\n            <button\n                className=\"mb-4 p-4 rounded bg-indigo-500 hover:bg-indigo-900 text-white\"\n                onClick={readNFC}\n            >\n                Start NFC Scan\n            </button>\n            <div className=\"text-center\">\n                <p className=\"mb-2 font-medium\">Details from Previous Page:</p>\n                <p>Phone Number: {phoneNumber}</p>\n                <p>Country Code: {countryCode}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default NfcCon;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}